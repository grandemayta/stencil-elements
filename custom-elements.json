{
  "timestamp": "2020-06-12T06:52:52",
  "compiler": {
    "name": "@stencil/core",
    "version": "1.9.2",
    "typescriptVersion": "3.8.3"
  },
  "components": [
    {
      "filePath": "src\\components\\accordion\\accordion.tsx",
      "encapsulation": "shadow",
      "tag": "we-accordion",
      "readme": "# we-accordion\r\n\r\n```html\r\n<we-accordion-group>\r\n  <we-accordion>\r\n    <div slot=\"title\">Accordion 1</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n    <we-accordion>\r\n    <div slot=\"title\">Accordion 2</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n  <we-accordion>\r\n    <div slot=\"title\">Accordion 3</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n</we-accordion-group>\r\n```\r\n<br>\r\n\r\n\r",
      "docs": "```html\r\n<we-accordion-group>\r\n  <we-accordion>\r\n    <div slot=\"title\">Accordion 1</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n    <we-accordion>\r\n    <div slot=\"title\">Accordion 2</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n  <we-accordion>\r\n    <div slot=\"title\">Accordion 3</div>\r\n    <div slot=\"content\">\r\n        Lorem Ipsum is simply dummy text of the printing and typesetting industry.\r\n    </div>\r\n  </we-accordion>\r\n</we-accordion-group>\r\n```\r\n<br>",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Indentify if accordion is opened of not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "accordionCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered each time the accordion is opened/closed",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\accordion-group\\accordion-group.tsx",
      "encapsulation": "shadow",
      "tag": "we-accordion-group",
      "readme": "# we-accordion-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "multiple",
          "type": "boolean",
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Identify if this accordion group contains more accordions or only once",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\button\\button.tsx",
      "encapsulation": "shadow",
      "tag": "we-button",
      "readme": "# we-button\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "If you use label prop you can create simple button with only text, if you want to use button with many things inside don't use label prop but put the contents inside the tag we-button",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value returned from buttonCallback event when button will be pressed",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "buttonCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when button is pressed",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\card\\card.tsx",
      "encapsulation": "shadow",
      "tag": "we-card",
      "readme": "# we-card\r\n\r\n```html\r\n     <we-card>\r\n      <div slot=\"title\">Title</div>\r\n      <div slot=\"subtitle\">Subtitle</div>\r\n      <div slot=\"texts\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</div>\r\n    </we-card>\r\n```\r\n\r",
      "docs": "```html\r\n     <we-card>\r\n      <div slot=\"title\">Title</div>\r\n      <div slot=\"subtitle\">Subtitle</div>\r\n      <div slot=\"texts\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</div>\r\n    </we-card>\r\n```",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\checkbox\\checkbox.tsx",
      "encapsulation": "shadow",
      "tag": "we-checkbox",
      "readme": "# we-checkbox\r\n\r\n```html\r\n<we-checkbox-group name=\"fruits\" change-callback=checkboxHandler>\r\n  <we-checkbox value=\"banana\">Banana</we-checkbox>\r\n  <we-checkbox value=\"apple\">Apple</we-checkbox>\r\n  <we-checkbox value=\"pear\">Pear</we-checkbox>\r\n</we-checkbox-group>\r\n```\r\n<br>\r",
      "docs": "```html\r\n<we-checkbox-group name=\"fruits\" change-callback=checkboxHandler>\r\n  <we-checkbox value=\"banana\">Banana</we-checkbox>\r\n  <we-checkbox value=\"apple\">Apple</we-checkbox>\r\n  <we-checkbox value=\"pear\">Pear</we-checkbox>\r\n</we-checkbox-group>\r\n```\r\n<br>",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "identify if this checkbox is checked or not when the page is loaded",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Identify if this checkbox is disabled or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value returned when the input is submitted if this checkbox is checked",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "checkboxCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when this checkbox is checked/not checked returning the value prop for payload",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\checkbox-group\\we-checkbox-group.tsx",
      "encapsulation": "shadow",
      "tag": "we-checkbox-group",
      "readme": "# we-checkbox-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "changeCallback",
          "type": "any",
          "mutable": false,
          "attr": "change-callback",
          "reflectToAttr": false,
          "docs": "Event triggered when a checkbox inside change its state that returning the name of checkbox group and the value of checkbox changed",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name that identify this checkbox group",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\chips\\chips.tsx",
      "encapsulation": "shadow",
      "tag": "we-chips",
      "readme": "# we-chips\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isSelectable",
          "type": "boolean",
          "mutable": false,
          "attr": "is-selectable",
          "reflectToAttr": false,
          "docs": "If true user can select the chips and selectCallback event is triggered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Center text written inside the chips if you want a text inside the chips",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removeLeft",
          "type": "boolean",
          "mutable": false,
          "attr": "remove-left",
          "reflectToAttr": false,
          "docs": "If true the chips will be removed when user click on left image inside chips and removeCallback event is triggered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "removeRight",
          "type": "boolean",
          "mutable": false,
          "attr": "remove-right",
          "reflectToAttr": false,
          "docs": "If true the chips will be removed when user click on right image inside chips and removeCallback event is triggered",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "srcImgLeft",
          "type": "string",
          "mutable": false,
          "attr": "src-img-left",
          "reflectToAttr": false,
          "docs": "Src of img you want to put in left side of chips if you want an image in that position",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "srcImgRight",
          "type": "string",
          "mutable": false,
          "attr": "src-img-right",
          "reflectToAttr": false,
          "docs": "Src of img you want to put in right side of chips if you want an image in that position",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "removeCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when the chips is removed",
          "docsTags": []
        },
        {
          "event": "selectCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when the chips is selected",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\divider\\divider.tsx",
      "encapsulation": "shadow",
      "tag": "we-divider",
      "readme": "# we-divider\r\n```html\r\n<we-divider></we-divider>\r\n```\r\n\r\n\r",
      "docs": "```html\r\n<we-divider></we-divider>\r\n```",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\dropdown-group\\dropdown-group.tsx",
      "encapsulation": "shadow",
      "tag": "we-dropdown-group",
      "readme": "# we-dropdown-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "orientation",
          "type": "string",
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Define the orientation of the objects inside this group, \"column\" or \"row\"",
          "docsTags": [],
          "default": "\"column\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\dropdown-item\\dropdown-item.tsx",
      "encapsulation": "shadow",
      "tag": "we-dropdown-item",
      "readme": "# we-dropdown-item\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "arrow",
          "type": "string",
          "mutable": false,
          "attr": "arrow",
          "reflectToAttr": false,
          "docs": "Arrow direction when dropdown is opened/closed inserted in this way: [\"arrow_closed\",\"arrow_opened\"], values accepted: right, left, up, down",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "borderClass",
          "type": "string",
          "mutable": false,
          "attr": "border-class",
          "reflectToAttr": false,
          "docs": "Prop update from dropdown group depend on the orientation the dropdown item is put in order to draw a line separation between them",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "height",
          "type": "string",
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Height of the children container when is opened/closed, insert it if you want a transition of height in this way: [\"height_close\", \"height_open\"], usually the height_close is 0",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Text inside the dropdown item if you want to use a simple dropdown item with only text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "positionChildren",
          "type": "string",
          "mutable": false,
          "attr": "position-children",
          "reflectToAttr": false,
          "docs": "In which position you want put children relative to the parent dropdown item: right, left, bottom, top <br> Choosen the position you can also modify the css variables that define the position",
          "docsTags": [],
          "default": "\"right\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value put in payload of event triggered when dropdown item is clicked",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "width",
          "type": "string",
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Width of the children container when is opened/closed, insert it if you want a transition of width in this way: [\"width_close\", \"width_open\"], usually the width_close is 0",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "clickItemCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when dropdown item is clicked, not the arrow",
          "docsTags": []
        }
      ],
      "styles": [],
<<<<<<< HEAD
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\modal\\modal.tsx",
      "encapsulation": "shadow",
      "tag": "we-modal",
      "readme": "# we-modal\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "isVisible",
          "type": "boolean",
          "mutable": false,
          "attr": "is-visible",
          "reflectToAttr": false,
          "docs": "identify if modal is visible or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "modalCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when the visibility of modal change",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\navigation-drawer\\navigation-drawer.tsx",
      "encapsulation": "shadow",
      "tag": "we-navigation-drawer",
      "readme": "# we-navigation-drawer\n\n\n",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closed",
          "type": "boolean",
          "mutable": false,
          "attr": "closed",
          "reflectToAttr": false,
          "docs": "If true the navigation drawer is closed",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [
        {
          "name": "--dropdown-item_children--transition",
          "annotation": "prop",
          "docs": "Transition of navigation drawer <br> Default: all 0.5s"
        },
        {
          "name": "--navigation-drawer--align-items",
          "annotation": "prop",
          "docs": "Align items of navigation drawer <br> Default: start"
        },
        {
          "name": "--navigation-drawer--background",
          "annotation": "prop",
          "docs": "Background of navigation drawer <br> Default: rgba(151, 151, 151, 1)"
        },
        {
          "name": "--navigation-drawer--border",
          "annotation": "prop",
          "docs": "Border of navigation drawer <br> Default: none"
        },
        {
          "name": "--navigation-drawer--bottom",
          "annotation": "prop",
          "docs": "Bottom option of navigation drawer <br> Default: auto"
        },
        {
          "name": "--navigation-drawer--color",
          "annotation": "prop",
          "docs": "Color of navigation drawer <br> Default: rgba(0, 0, 0, 1)"
        },
        {
          "name": "--navigation-drawer--display",
          "annotation": "prop",
          "docs": "Display of navigation drawer <br> Default: flex"
        },
        {
          "name": "--navigation-drawer--font-size",
          "annotation": "prop",
          "docs": "Font size of navigation drawer <br> Default: 1em"
        },
        {
          "name": "--navigation-drawer--height",
          "annotation": "prop",
          "docs": "Height of navigation drawer <br> Default: 100vh"
        },
        {
          "name": "--navigation-drawer--justify-content",
          "annotation": "prop",
          "docs": "Justify content of navigation drawer <br> Default: left"
        },
        {
          "name": "--navigation-drawer--left",
          "annotation": "prop",
          "docs": "Left option of navigation drawer <br> Default: 0"
        },
        {
          "name": "--navigation-drawer--padding",
          "annotation": "prop",
          "docs": "Padding of navigation drawer <br> Default: 0.625em"
        },
        {
          "name": "--navigation-drawer--position",
          "annotation": "prop",
          "docs": "Position of navigation drawer <br> Default: fixed"
        },
        {
          "name": "--navigation-drawer--right",
          "annotation": "prop",
          "docs": "Right option of navigation drawer <br> Default: auto"
        },
        {
          "name": "--navigation-drawer--top",
          "annotation": "prop",
          "docs": "Top option of navigation drawer <br> Default: 0"
        },
        {
          "name": "--navigation-drawer--width",
          "annotation": "prop",
          "docs": "Width of navigation drawer<br> Default: 12.5em"
        }
      ],
=======
>>>>>>> c4ce68024810ba3d6700e9ff147ab7c90f7b8344
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\radio\\radio.tsx",
      "encapsulation": "shadow",
      "tag": "we-radio",
      "readme": "# we-radio\r\n\r\n```html\r\n<we-radio-group change-callback=myFuncion>\r\n  <we-radio name=\"country\" checked=\"true\" value=\"pe\">Peru</we-radio>\r\n  <we-radio name=\"country\" value=\"it\">Italia</we-radio>\r\n  <we-radio name=\"country\" value=\"de\">Germany</we-radio>\r\n</we-radio-group>\r\n```\r\n<br>\r\n\r",
      "docs": "```html\r\n<we-radio-group change-callback=myFuncion>\r\n  <we-radio name=\"country\" checked=\"true\" value=\"pe\">Peru</we-radio>\r\n  <we-radio name=\"country\" value=\"it\">Italia</we-radio>\r\n  <we-radio name=\"country\" value=\"de\">Germany</we-radio>\r\n</we-radio-group>\r\n```\r\n<br>",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "mutable": false,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "identify if this radio button is checked or not when the page is loaded",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Identify if this radio button is disabled or not",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Value returned when the input is submitted if this radio button is checked",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "radioCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when this radio button is checked/not checked returning the value prop for payload",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\radio-group\\radio-group.tsx",
      "encapsulation": "shadow",
      "tag": "we-radio-group",
      "readme": "# we-radio-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "changeCallback",
          "type": "any",
          "mutable": false,
          "attr": "change-callback",
          "reflectToAttr": false,
          "docs": "Event triggered when a radio button inside change its state that returning the name of radio group and the value of radio button checked",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name that identify this radio group",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\slider\\slider.tsx",
      "encapsulation": "shadow",
      "tag": "we-slider",
      "readme": "# we-slider\r\n\r\n```html\r\n<we-slider value=10 min=0 max=50>Slider 1</we-slider>\r\n```\r\n\r",
      "docs": "```html\r\n<we-slider value=10 min=0 max=50>Slider 1</we-slider>\r\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "changeCallback",
          "type": "any",
          "mutable": false,
          "attr": "change-callback",
          "reflectToAttr": false,
          "docs": "Event triggered any time user moves the slider putting in the payload name and current value",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Identify if slider is disabled or not",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "max",
          "type": "number",
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value you can set in the slider",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "min",
          "type": "number",
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimum value you can set in the slider",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of slider, put in the payload of changeCallback event",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "value",
          "type": "number",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Starting value of slider",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\switch\\switch.tsx",
      "encapsulation": "shadow",
      "tag": "we-switch",
      "readme": "# we-switch\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "changeCallback",
          "type": "any",
          "mutable": false,
          "attr": "change-callback",
          "reflectToAttr": false,
          "docs": "Event triggered any time user change the state of the switch putting in the payload name and status",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "enabled",
          "type": "boolean",
          "mutable": false,
          "attr": "enabled",
          "reflectToAttr": false,
          "docs": "Default value of switch when component is rendered the first time",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelLeft",
          "type": "string",
          "mutable": false,
          "attr": "label-left",
          "reflectToAttr": false,
          "docs": "Text put in the left of switch",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "labelRight",
          "type": "string",
          "mutable": false,
          "attr": "label-right",
          "reflectToAttr": false,
          "docs": "Text put in the right of switch",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "any",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of switch, put in the payload of changeCallback event",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\tab\\tab.tsx",
      "encapsulation": "shadow",
      "tag": "we-tab",
      "readme": "# we-tab\r\n\r\n```html\r\n<we-tab-group>\r\n  <we-tab>\r\n    <div slot=\"header\">Tab 1</div>\r\n    <div slot=\"content\">\r\n      <h3>Tab 1</h3>\r\n        <p>There really are a lot of features.</p>\r\n    </div>\r\n    </we-tab>\r\n    <we-tab>\r\n    <div slot=\"header\">Tab 2</div>\r\n    <div slot=\"content\">\r\n        <h3>Tab 2</h3>\r\n        <p>The project started in 2018 when someone needed something.</p>\r\n    </div>\r\n    </we-tab>\r\n    <we-tab>\r\n    <div slot=\"header\">Tab 3</div>\r\n    <div slot=\"content\">\r\n        <h3>Tab 3</h3>\r\n        <p>Amazing product. I don't know how it works.</p>\r\n    </div>\r\n    </we-tab>\r\n</we-tab-group>\r\n```\r\n<br>\r\n\r\n\r\n\r",
      "docs": "```html\r\n<we-tab-group>\r\n  <we-tab>\r\n    <div slot=\"header\">Tab 1</div>\r\n    <div slot=\"content\">\r\n      <h3>Tab 1</h3>\r\n        <p>There really are a lot of features.</p>\r\n    </div>\r\n    </we-tab>\r\n    <we-tab>\r\n    <div slot=\"header\">Tab 2</div>\r\n    <div slot=\"content\">\r\n        <h3>Tab 2</h3>\r\n        <p>The project started in 2018 when someone needed something.</p>\r\n    </div>\r\n    </we-tab>\r\n    <we-tab>\r\n    <div slot=\"header\">Tab 3</div>\r\n    <div slot=\"content\">\r\n        <h3>Tab 3</h3>\r\n        <p>Amazing product. I don't know how it works.</p>\r\n    </div>\r\n    </we-tab>\r\n</we-tab-group>\r\n```\r\n<br>",
      "docsTags": [
        {
          "text": "header - Slot for the title",
          "name": "slot"
        },
        {
          "text": "content - Slot for the content",
          "name": "slot"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "enabled",
          "type": "boolean",
          "mutable": false,
          "attr": "enabled",
          "reflectToAttr": false,
          "docs": "Default value of tab (opened/closed) when component is triggered the first time",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tabCallback",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Event triggered when user select a tab putting in the payload the value id generated",
          "docsTags": []
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Slot for the content"
        },
        {
          "name": "header",
          "docs": "Slot for the title"
        }
      ],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\tab-group\\tab-group.tsx",
      "encapsulation": "shadow",
      "tag": "we-tab-group",
      "readme": "# we-tabs-group\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\textarea\\textarea.tsx",
      "encapsulation": "shadow",
      "tag": "we-textarea",
      "readme": "# we-textarea\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Identify the autofocus property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "cols",
          "type": "any",
          "mutable": false,
          "attr": "cols",
          "reflectToAttr": false,
          "docs": "Identify the cols property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Identify the disabled property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Identify the maxlength property of textarea",
          "docsTags": [],
          "default": "100000",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name prop of the textarea",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder appear when there isn't text in the textarea",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Identify the readonly property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Identify the required property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rows",
          "type": "any",
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Identify the rows property of textarea",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "Test inside the textarea when rendered the first time",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src\\components\\tooltip\\tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "we-tooltip",
      "readme": "# we-tooltip\r\n\r\n\r\n\r",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "If you want to use a simple tooltip you can only add this value",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "styles": [],
      "slots": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    }
  ]
}