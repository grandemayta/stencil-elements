/**
* @prop --dropdown-item--cursor: Cursor inside dropdown item <br> Default: pointer
* @prop --dropdown-item--display: Display of dropdown item <br> Default: flex
* @prop --dropdown-item--width: Width of dropdown item <br> Default: 200px
* @prop --dropdown-item--height: Height of dropdown item <br> Default: 30px
* @prop --dropdown-item--background: Background of dropdown item <br> Default: rgba(255, 255, 255, 1)     
* @prop --dropdown-item--color: Color of dropdown item <br> Default: rgba(0, 0, 0, 1)
* @prop --dropdown-item--padding: Padding of dropdown item <br> Default: 10px
* @prop --dropdown-item--margin: Margin of dropdown item <br> Default: 0
* @prop --dropdown-item--justify-content: Justify content inside dropdown item <br> Default: space-between
* @prop --dropdown-item--align-items: Align items inside dropdown item <br> Default: center
* @prop --dropdown-item--border-right: Border right of item in a row dropdown group <br> Default: solid 2px rgba(0, 0, 0, 1)
* @prop --dropdown-item--border-bottom: Border bottom of item in a column dropdown group<br> Default: solid 2px rgba(0, 0, 0, 1)

* @prop --dropdown-item--background-hover: Background of dropdown item when user go on hover with mouse <br> Default: rgb(185, 185, 185)   

* @prop --dropdown-item_arrow--border: Border of dropdown item arrow <br> Default: solid rgba(0, 0, 0, 1)   
* @prop --dropdown-item_arrow--padding: Padding of dropdown item arrow <br> Default: 3px
* @prop --dropdown-item_arrow--border-width: Border width of dropdown item arrow <br> Default: 0 3px 3px 0        
* @prop --dropdown-item_arrow--display: Display of dropdown item arrow  <br> Default: inline-block
* @prop --dropdown-item_arrow--transition: Transition of dropdown item arrow <br> Default: all 0.5s

* @prop --dropdown-item_children--position: Position of dropdown item children, not change it to default behaviour <br> Default: absolute
* @prop --dropdown-item_children--transition: Transition of dropdown item children <br> Default: all 0.5s
* @prop --dropdown-item_children--top: Top property of dropdown item children, the default value depend of the position class choosen for the children (default value indicated is for left class) <br> Default: -2px
* @prop --dropdown-item_children--right: Right property of dropdown item children, the default value depend of the position class choosen for the children (default value indicated is for left class) <br> Default: 100%
* @prop --dropdown-item_children--left: Left property of dropdown item children, the default value depend of the position class choosen for the children (default class, position_left, not used this property) <br> Default: 100%
* @prop --dropdown-item_children--bottom: Bottom property of dropdown item children, the default value depend of the position class choosen for the children (default class, position_left, not used this property) <br> Default: 100%
*/

:host {
  display: block;
  position: relative;
  cursor: var(--dropdown-item--cursor, pointer);

  .dropdown_item {
    display: var(--dropdown-item--display, flex);
    width: var(--dropdown-item--width, 200px);
    height: var(--dropdown-item--height, 30px);
    background: var(--dropdown-item--background, rgba(255, 255, 255, 1));
    color: var(--dropdown-item--color, rgba(0, 0, 0, 1));
    padding: var(--dropdown-item--padding, 10px);
    margin: var(--dropdown-item--margin, 0);
    justify-content: var(--dropdown-item--justify-content, space-between);
    align-items: var(--dropdown-item--align-items, center);

    &.margin_right {
      border-right: var(--dropdown-item--border-right, solid 2px rgba(0, 0, 0, 1)
      );
    }

    &.margin_bottom {
      border-bottom: var(--dropdown-item--border-bottom, solid 2px rgba(0, 0, 0, 1)
      );
    }

    &:hover {
      background: var(--dropdown-item--background-hover, rgb(185, 185, 185));
    }

    label {
      pointer-events: none;
    }

    .arrow {
      border: var(--dropdown-item_arrow--border, solid rgba(0, 0, 0, 1));
      padding: var(--dropdown-item_arrow--padding, 3px);
      border-width: var(--dropdown-item_arrow--border-width, 0 3px 3px 0);
      display: var(--dropdown-item_arrow--display, inline-block);
      transition: var(--dropdown-item_arrow--transition, all 0.5s);

      &.right {
        transform: rotate(-45deg);
        -webkit-transform: rotate(-45deg);
      }

      &.left {
        transform: rotate(135deg);
        -webkit-transform: rotate(135deg);
      }

      &.up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
      }

      &.down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
      }
    }
  }

  .children {
    position: var(--dropdown-item_children--position, absolute);
    transition: var(--dropdown-item_children--transition, all 0.5s);
    z-index: 2;

    &.position_right {
      top: var(--dropdown-item_children--top, -2px);
      left: var(--dropdown-item_children--left, 100%);
    }

    &.position_bottom {
      top: var(--dropdown-item_children--top, 100%);
      left: var(--dropdown-item_children--left, -2px);
    }

    &.position_left {
      top: var(--dropdown-item_children--top, -2px);
      right: var(--dropdown-item_children--right, 100%);
    }

    &.position_top {
      bottom: var(--dropdown-item_children--bottom, 100%);
      left: var(--dropdown-item_children--left, -2px);
    }
  }
}
