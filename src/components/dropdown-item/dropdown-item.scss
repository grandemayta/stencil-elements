/**
* @prop --cursor: Cursor inside dropdown item <br> Default: pointer
* @prop --display: Display of dropdown item <br> Default: flex
* @prop --width: Width of dropdown item <br> Default: 12.5em
* @prop --height: Height of dropdown item <br> Default: 1.875em
* @prop --background: Background of dropdown item <br> Default: rgba(255, 255, 255, 1)     
* @prop --color: Color of dropdown item <br> Default: rgba(0, 0, 0, 1)
* @prop --padding: Padding of dropdown item <br> Default: 0.625em
* @prop --margin: Margin of dropdown item <br> Default: 0
* @prop --justify-content: Justify content inside dropdown item <br> Default: space-between
* @prop --align-items: Align items inside dropdown item <br> Default: center
* @prop --border-right: Border right of item in a row dropdown group <br> Default: solid 0.125em rgba(0, 0, 0, 1)
* @prop --border-bottom: Border bottom of item in a column dropdown group<br> Default: solid 0.125em rgba(0, 0, 0, 1)

* @prop --background-hover: Background of dropdown item when user go on hover with mouse <br> Default: rgb(185, 185, 185)   

* @prop --arrow--border: Border of dropdown item arrow <br> Default: solid rgba(0, 0, 0, 1)   
* @prop --arrow--padding: Padding of dropdown item arrow <br> Default: 0.1875em
* @prop --arrow--border-width: Border width of dropdown item arrow <br> Default: 0 0.1875em 0.1875em 0        
* @prop --arrow--display: Display of dropdown item arrow  <br> Default: inline-block
* @prop --arrow--transition: Transition of dropdown item arrow <br> Default: all 0.5s

* @prop --children--position: Position of dropdown item children, not change it to default behaviour <br> Default: absolute
* @prop --children--transition: Transition of dropdown item children <br> Default: all 0.5s
* @prop --children--top: Top property of dropdown item children, the default value depend of the position class choosen for the children (default value indicated is for left class) <br> Default: -0.125em
* @prop --children--right: Right property of dropdown item children, the default value depend of the position class choosen for the children (default value indicated is for left class) <br> Default: 100%
* @prop --children--left: Left property of dropdown item children, the default value depend of the position class choosen for the children (default class, position_left, not used this property) <br> Default: 100%
* @prop --children--bottom: Bottom property of dropdown item children, the default value depend of the position class choosen for the children (default class, position_left, not used this property) <br> Default: 100%
*/

:host {
  display: block;
  position: relative;
  cursor: var(--cursor, pointer);

  .dropdown_item {
    display: var(--display, flex);
    width: var(--width, 12.5em);
    height: var(--height, 1.875em);
    background: var(--background, rgba(255, 255, 255, 1));
    color: var(--color, rgba(0, 0, 0, 1));
    padding: var(--padding, 0.625em);
    margin: var(--margin, 0);
    justify-content: var(--justify-content, space-between);
    align-items: var(--align-items, center);

    &.border_right {
      border-right: var(--border-right, solid 0.125em rgba(0, 0, 0, 1)
      );
    }

    &.border_bottom {
      border-bottom: var(--border-bottom, solid 0.125em rgba(0, 0, 0, 1)
      );
    }

    &:hover {
      background: var(--background-hover, rgb(185, 185, 185));
    }

    label {
      pointer-events: none;
    }

    .arrow {
      border: var(--arrow--border, solid rgba(0, 0, 0, 1));
      padding: var(--arrow--padding, 0.1875em);
      border-width: var(--arrow--border-width, 0 0.1875em 0.1875em 0);
      display: var(--arrow--display, inline-block);
      transition: var(--arrow--transition, all 0.5s);

      &.right {
        transform: rotate(-45deg);
        -webkit-transform: rotate(-45deg);
      }

      &.left {
        transform: rotate(135deg);
        -webkit-transform: rotate(135deg);
      }

      &.up {
        transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
      }

      &.down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
      }
    }
  }

  .children {
    position: var(--children--position, absolute);
    transition: var(--children--transition, all 0.5s);
    z-index: 2;

    &.position_right {
      top: var(--children--top, -0.125em);
      left: var(--children--left, 100%);
    }

    &.position_bottom {
      top: var(--children--top, 100%);
      left: var(--children--left, -0.125em);
    }

    &.position_left {
      top: var(--children--top, -0.125em);
      right: var(--children--right, 100%);
    }

    &.position_top {
      bottom: var(--children--bottom, 100%);
      left: var(--children--left, -0.125em);
    }
  }
}
